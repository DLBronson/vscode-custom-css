
To capture RTSP feeds from multiple cameras using a script, you can modify the script to loop through a list of camera configurations and capture video from each camera. Here's an example of how you can modify the script to capture from multiple cameras:

```bash
#!/bin/bash

# Define camera configurations in an array
camera_configs=(
  "rtsp://USERNAME1:PASSWORD1@CAMERA_IP1:PORT1/VIDEO_PATH1"
  "rtsp://USERNAME2:PASSWORD2@CAMERA_IP2:PORT2/VIDEO_PATH2"
  # Add more camera configurations as needed
)

# Output directory
output_dir="/path/to/save/videos"

# Create a new directory for each day to organize recordings
today=$(date +%Y-%m-%d)
mkdir -p "$output_dir/$today"

# Loop through camera configurations and capture video
for camera_url in "${camera_configs[@]}"; do
  camera_name=$(basename "$camera_url")
  camera_name="${camera_name%.*}"
  ffmpeg -i "$camera_url" -c:v copy -an -f segment -segment_time 900 -reset_timestamps 1 -strftime 1 "$output_dir/$today/$camera_name_%Y-%m-%d_%H-%M-%S.mp4"
done
```

In this modified script:

1. Define your camera configurations in the `camera_configs` array, where each element represents the RTSP URL of a camera.

2. Loop through the camera configurations and capture video from each camera. The script will organize the recordings by camera name and date within the specified output directory.

3. You can add as many camera configurations as needed to capture video from multiple cameras simultaneously. Just ensure that each camera's RTSP URL is correctly formatted within the `camera_configs` array.

This script will capture video from each camera and save it in 15-minute segments, organizing the recordings by both camera and date. You can schedule this script to run periodically to capture feeds from all specified cameras.


